{"ast":null,"code":"// /api/cartService.js\nconst BASE_URL = \"/api/carts\"; // Base URL for the cart API\n\nexport const fetchCart = async token => {\n  try {\n    const response = await fetch(BASE_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart.\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport const updateCart = async (cartItems, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        cartItems\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to update cart.\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport const addItemToCart = async (cartItem, token) => {\n  try {\n    const response = await fetch(\"/api/carts/items/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        cartItem\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      const errorData = await response.json(); // Retrieve error message from the response\n      return {\n        error: errorData.error || \"Failed to update cart.\"\n      };\n    }\n    return await response.json(); // Return the JSON data on success\n  } catch (error) {\n    return {\n      error: error.message\n    }; // Return the error message on failure\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchCart","token","response","fetch","headers","Authorization","ok","Error","json","error","message","updateCart","cartItems","method","body","JSON","stringify","addItemToCart","cartItem","errorData"],"sources":["/Users/stutipatel/Desktop/Empire-WebApp/frontend/src/api/cartService.js"],"sourcesContent":["// /api/cartService.js\nconst BASE_URL = \"/api/carts\"; // Base URL for the cart API\n\nexport const fetchCart = async (token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart.\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const updateCart = async (cartItems, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"PATCH\",\n      body: JSON.stringify({ cartItems }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to update cart.\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const addItemToCart = async (cartItem, token) => {\n  try {\n      const response = await fetch(\"/api/carts/items/\", {\n          method: \"POST\",\n          body: JSON.stringify({ cartItem }),\n          headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`,\n          },\n      });\n\n      if (!response.ok) {\n          const errorData = await response.json(); // Retrieve error message from the response\n          return { error: errorData.error || \"Failed to update cart.\" };\n      }\n\n      return await response.json(); // Return the JSON data on success\n  } catch (error) {\n      return { error: error.message }; // Return the error message on failure\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,YAAY,CAAC,CAAC;;AAE/B,OAAO,MAAMC,SAAS,GAAG,MAAOC,KAAK,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCK,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,KAAK;MAAG;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,SAAS,EAAEX,KAAK,KAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCc,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ;MAAU,CAAC,CAAC;MACnCR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC;AAED,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEjB,KAAK,KAAK;EACtD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;MAC9CU,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEE;MAAS,CAAC,CAAC;MAClCd,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUJ,KAAK;MAClC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MACd,MAAMa,SAAS,GAAG,MAAMjB,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;MACzC,OAAO;QAAEC,KAAK,EAAEU,SAAS,CAACV,KAAK,IAAI;MAAyB,CAAC;IACjE;IAEA,OAAO,MAAMP,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACC;IAAQ,CAAC,CAAC,CAAC;EACrC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}