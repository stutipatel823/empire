{"ast":null,"code":"// /api/cartService.js\nconst BASE_URL = \"/api/carts\"; // Base URL for the cart API\n\nexport const fetchCart = async token => {\n  try {\n    const response = await fetch(BASE_URL, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart.\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport const updateCart = async (cartItems, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"PATCH\",\n      body: JSON.stringify({\n        cartItems\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to update cart.\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\nexport const addItemToCart = async (cartItem, token) => {\n  const response = await fetch(\"/api/cart\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    body: JSON.stringify(cartItem)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to add item to cart\");\n  }\n  const data = await response.json();\n  return data.cartItems; // Ensure this returns the updated cart items\n};\nexport const deleteItemFromCart = async (product_id, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        product: product_id\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete product from cart\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchCart","token","response","fetch","headers","Authorization","ok","Error","json","error","message","updateCart","cartItems","method","body","JSON","stringify","addItemToCart","cartItem","data","deleteItemFromCart","product_id","product"],"sources":["/Users/stutipatel/Desktop/MERN/frontend/src/api/cartService.js"],"sourcesContent":["// /api/cartService.js\nconst BASE_URL = \"/api/carts\"; // Base URL for the cart API\n\nexport const fetchCart = async (token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch cart.\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const updateCart = async (cartItems, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"PATCH\",\n      body: JSON.stringify({ cartItems }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\"Failed to update cart.\");\n    }\n\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const addItemToCart = async (cartItem, token) => {\n  const response = await fetch(\"/api/cart\", {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`,\n      },\n      body: JSON.stringify(cartItem),\n  });\n  if (!response.ok) {\n      throw new Error(\"Failed to add item to cart\");\n  }\n  const data = await response.json();\n  return data.cartItems; // Ensure this returns the updated cart items\n};\n\nexport const deleteItemFromCart = async (product_id, token) => {\n  try {\n    const response = await fetch(BASE_URL, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ product: product_id }),\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to delete product from cart\");\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,YAAY,CAAC,CAAC;;AAE/B,OAAO,MAAMC,SAAS,GAAG,MAAOC,KAAK,IAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCK,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,KAAK;MAAG;IAC9C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,SAAS,EAAEX,KAAK,KAAK;EACpD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCc,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ;MAAU,CAAC,CAAC;MACnCR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUJ,KAAK;MAChC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC;AAED,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEjB,KAAK,KAAK;EACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAE;IACtCU,MAAM,EAAE,MAAM;IACdT,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUH,KAAK;IACpC,CAAC;IACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,QAAQ;EACjC,CAAC,CAAC;EACF,IAAI,CAAChB,QAAQ,CAACI,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EACjD;EACA,MAAMY,IAAI,GAAG,MAAMjB,QAAQ,CAACM,IAAI,CAAC,CAAC;EAClC,OAAOW,IAAI,CAACP,SAAS,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAOC,UAAU,EAAEpB,KAAK,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,QAAQ,EAAE;MACrCc,MAAM,EAAE,QAAQ;MAChBT,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUJ,KAAK;MAChC,CAAC;MACDa,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEM,OAAO,EAAED;MAAW,CAAC;IAC9C,CAAC,CAAC;IACF,IAAI,CAACnB,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAACE,KAAK,CAACC,OAAO,CAAC;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}